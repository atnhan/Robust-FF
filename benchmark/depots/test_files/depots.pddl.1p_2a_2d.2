(define (domain Depot)
(:requirements :typing)
(:types place locatable - object
	depot distributor - place
        truck hoist surface - locatable
        pallet crate - surface)

(:predicates (at ?x - locatable ?y - place) 
             (on ?x - crate ?y - surface)
             (in ?x - crate ?y - truck)
             (lifting ?x - hoist ?y - crate)
             (available ?x - hoist)
             (clear ?x - surface))
	
(:action Drive
:parameters (?x - truck ?y - place ?z - place) 
:precondition
	(and
		(at ?x ?y)
	)
:poss-precondition
	(and
	)
:effect
	(and
		(at ?x ?z)
		(not (at ?x ?y))
	)
:poss-effect
	(and
	)
)

(:action Lift
:parameters (?x - hoist ?y - crate ?z - surface ?p - place)
:precondition
	(and
		(on ?y ?z)
		(at ?x ?p)
		(available ?x)
		(at ?y ?p)
		(clear ?y)
	)
:poss-precondition
	(and
		(clear ?y)
	)
:effect
	(and
		(clear ?z)
		(lifting ?x ?y)
		(not (available ?x))
		(not (on ?y ?z))
		(not (clear ?y))
		(not (at ?y ?p))
	)
:poss-effect
	(and
	)
)

(:action Drop 
:parameters (?x - hoist ?y - crate ?z - surface ?p - place)
:precondition
	(and
		(clear ?z)
		(at ?z ?p)
		(lifting ?x ?y)
		(at ?x ?p)
	)
:poss-precondition
	(and
	)
:effect
	(and
		(on ?y ?z)
		(clear ?y)
		(at ?y ?p)
		(not (clear ?z))
		(not (lifting ?x ?y))
	)
:poss-effect
	(and
		(available ?x)
		(not (at ?z ?p))
	)
)

(:action Load
:parameters (?x - hoist ?y - crate ?z - truck ?p - place)
:precondition
	(and
		(at ?z ?p)
		(lifting ?x ?y)
		(at ?x ?p)
	)
:poss-precondition
	(and
	)
:effect
	(and
		(available ?x)
		(not (lifting ?x ?y))
	)
:poss-effect
	(and
		(in ?y ?z)
	)
)

(:action Unload 
:parameters (?x - hoist ?y - crate ?z - truck ?p - place)
:precondition
	(and
		(available ?x)
		(at ?z ?p)
		(in ?y ?z)
		(at ?x ?p)
	)
:poss-precondition
	(and
	)
:effect
	(and
		(lifting ?x ?y)
		(not (in ?y ?z))
		(not (available ?x))
	)
:poss-effect
	(and
		(not (at ?x ?p))
	)
)

)